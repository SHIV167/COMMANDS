schema.ts

import { Schema, model, Document, Types } from 'mongoose';
import { z } from 'zod';

// Define the schema for user model
export interface IUser extends Document {
  username: string;
  password: string;
  name: string;
  email: string;
  role: string;
  createdAt: Date;
}

const UserSchema = new Schema<IUser>({
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  name: { type: String, required: true },
  email: { type: String, required: true },
  role: { type: String, required: true, default: 'user' },
  createdAt: { type: Date, default: Date.now }
});

// Define the schema for project model
export interface IProject extends Document {
  title: string;
  description: string;
  imageUrl: string;
  technologies: string[];
  projectUrl?: string;
  githubUrl?: string;
  featured: boolean;
  authorId?: Types.ObjectId;
  createdAt: Date;
}

const ProjectSchema = new Schema<IProject>({
  title: { type: String, required: true },
  description: { type: String, required: true },
  imageUrl: { type: String, required: true },
  technologies: { type: [String], required: true },
  projectUrl: { type: String },
  githubUrl: { type: String },
  featured: { type: Boolean, default: false },
  authorId: { type: Schema.Types.ObjectId, ref: 'User' },
  createdAt: { type: Date, default: Date.now }
});

// Define skill categories
export const SkillCategories = ['frontend', 'backend', 'database', 'tools', 'cloud'] as const;
export type SkillCategory = typeof SkillCategories[number];

// Define the schema for skill model
export interface ISkill extends Document {
  name: string;
  percentage: number;
  category: SkillCategory;
  order: number;
}

const SkillSchema = new Schema<ISkill>({
  name: { type: String, required: true },
  percentage: { type: Number, required: true },
  category: { 
    type: String, 
    required: true,
    enum: SkillCategories
  },
  order: { type: Number, required: true, default: 0 }
});

// Define the schema for category model
export interface ICategory extends Document {
  name: string;
  slug: string;
}

const CategorySchema = new Schema<ICategory>({
  name: { type: String, required: true, unique: true },
  slug: { type: String, required: true, unique: true }
});

// Define the schema for blog model
export interface IBlog extends Document {
  title: string;
  slug: string;
  content: string;
  excerpt: string;
  imageUrl: string;
  categoryId?: Types.ObjectId;
  authorId?: Types.ObjectId;
  published: boolean;
  createdAt: Date;
  updatedAt: Date;
}

const BlogSchema = new Schema<IBlog>({
  title: { type: String, required: true },
  slug: { type: String, required: true, unique: true },
  content: { type: String, required: true },
  excerpt: { type: String, required: true },
  imageUrl: { type: String, required: true },
  categoryId: { type: Schema.Types.ObjectId, ref: 'Category' },
  authorId: { type: Schema.Types.ObjectId, ref: 'User' },
  published: { type: Boolean, default: false },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});

// Define the schema for video model
export interface IVideo extends Document {
  title: string;
  videoId: string;
  thumbnailUrl: string;
  views?: number;
  publishedAt?: Date;
  featured: boolean;
  order: number;
}

const VideoSchema = new Schema<IVideo>({
  title: { type: String, required: true },
  videoId: { type: String, required: true },
  thumbnailUrl: { type: String, required: true },
  views: { type: Number },
  publishedAt: { type: Date },
  featured: { type: Boolean, default: false },
  order: { type: Number, required: true, default: 0 }
});

// Define the schema for contact model
export interface IContact extends Document {
  name: string;
  email: string;
  subject: string;
  message: string;
  read: boolean;
  createdAt: Date;
}

const ContactSchema = new Schema<IContact>({
  name: { type: String, required: true },
  email: { type: String, required: true },
  subject: { type: String, required: true },
  message: { type: String, required: true },
  read: { type: Boolean, default: false },
  createdAt: { type: Date, default: Date.now }
});

// Create and export the models
export const UserModel = model<IUser>('User', UserSchema);
export const ProjectModel = model<IProject>('Project', ProjectSchema);
export const SkillModel = model<ISkill>('Skill', SkillSchema);
export const CategoryModel = model<ICategory>('Category', CategorySchema);
export const BlogModel = model<IBlog>('Blog', BlogSchema);
export const VideoModel = model<IVideo>('Video', VideoSchema);
export const ContactModel = model<IContact>('Contact', ContactSchema);

// Zod schemas for validation
export const insertUserSchema = z.object({
  username: z.string().min(3),
  password: z.string().min(6),
  name: z.string().min(2),
  email: z.string().email(),
  role: z.string().default("user"),
});

export const insertProjectSchema = z.object({
  title: z.string().min(3),
  description: z.string().min(10),
  imageUrl: z.string()
    .optional()
    .refine((url) => {
      if (!url) return true; // Allow empty URL
      try {
        new URL(url);
        return true;
      } catch {
        return false;
      }
    }, { message: "Please enter a valid URL" }),
  technologies: z.array(z.string()),
  projectUrl: z.string().url().optional(),
  githubUrl: z.string().url().optional(),
  featured: z.boolean().default(false),
  authorId: z.string().optional(),
});

export const insertSkillSchema = z.object({
  name: z.string().min(2),
  percentage: z.number().min(0).max(100),
  category: z.enum(SkillCategories),
  order: z.number().default(0),
});

export const insertCategorySchema = z.object({
  name: z.string().min(2),
  slug: z.string().min(2),
});

export const insertBlogSchema = z.object({
  title: z.string().min(3),
  slug: z.string().min(3),
  content: z.string().min(10),
  excerpt: z.string().min(10),
  imageUrl: z.string().url(),
  categoryId: z.string().optional(),
  authorId: z.string().optional(),
  published: z.boolean().default(false),
});

export const insertVideoSchema = z.object({
  title: z.string().min(3),
  videoId: z.string(),
  thumbnailUrl: z.string().url(),
  views: z.number().optional(),
  publishedAt: z.date().optional(),
  featured: z.boolean().default(false),
  order: z.number().default(0),
});

export const insertContactSchema = z.object({
  name: z.string().min(2),
  email: z.string().email(),
  subject: z.string().min(3),
  message: z.string().min(10),
});

// Define types for imports/exports
export type User = IUser;
export type InsertUser = z.infer<typeof insertUserSchema>;

export type Project = IProject;
export type InsertProject = z.infer<typeof insertProjectSchema>;

export type Skill = ISkill;
export type InsertSkill = z.infer<typeof insertSkillSchema>;

export type Category = ICategory;
export type InsertCategory = z.infer<typeof insertCategorySchema>;

export type Blog = IBlog;
export type InsertBlog = z.infer<typeof insertBlogSchema>;

export type Video = IVideo;
export type InsertVideo = z.infer<typeof insertVideoSchema>;

export type Contact = IContact;
export type InsertContact = z.infer<typeof insertContactSchema>;




project-card.tsx

import { ExternalLink, Github } from 'lucide-react';
import { useState } from 'react';

interface ProjectCardProps {
  project: {
    id: string;
    imageUrl?: string;
    title: string;
    description: string;
    projectUrl?: string;
    githubUrl?: string;
    technologies: string[];
    featured: boolean;
  }
}

export function ProjectCard({ project }: ProjectCardProps) {
  const [imageError, setImageError] = useState(false);

  const handleImageError = () => {
    setImageError(true);
  };

  // Use a default image if the URL is invalid or missing
  const imageUrl = imageError || !project.imageUrl 
    ? 'https://placehold.co/600x400?text=Project+Image'
    : project.imageUrl;

  return (
    <div className="bg-white rounded-xl shadow-lg overflow-hidden transition-all duration-300 hover:shadow-2xl border border-gray-100">
      <div className="relative group aspect-video">
        <img 
          src={imageUrl}
          alt={project.title} 
          className="w-full h-full object-cover"
          onError={handleImageError}
          loading="lazy"
        />
        <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-black/50 to-transparent opacity-0 group-hover:opacity-100 transition-all duration-300 flex items-end justify-between p-4">
          <h3 className="text-white font-semibold text-lg">{project.title}</h3>
          <div className="flex gap-2">
            {project.githubUrl && (
              <a 
                href={project.githubUrl}
                target="_blank"
                rel="noopener noreferrer"
                className="p-2 bg-white/20 rounded-full hover:bg-white/30 transition-colors"
              >
                <Github className="w-5 h-5 text-white" />
              </a>
            )}
            {project.projectUrl && (
              <a 
                href={project.projectUrl}
                target="_blank"
                rel="noopener noreferrer"
                className="p-2 bg-white/20 rounded-full hover:bg-white/30 transition-colors"
              >
                <ExternalLink className="w-5 h-5 text-white" />
              </a>
            )}
          </div>
        </div>
      </div>
      
      <div className="p-4">
        <p className="text-gray-600 text-sm line-clamp-2 mb-4">{project.description}</p>
        <div className="flex flex-wrap gap-2">
          {project.technologies.map((tech, index) => (
            <span 
              key={`${project.id}-tech-${index}`}
              className="text-xs font-medium bg-gray-100 text-gray-800 px-2 py-1 rounded-full"
            >
              {tech}
            </span>
          ))}
        </div>
      </div>
    </div>
  );
}


project-form.tsx
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { insertProjectSchema } from '@shared/schema';

type ProjectFormValues = z.infer<typeof insertProjectSchema>;

interface ProjectFormProps {
  project?: ProjectFormValues;
  onSubmit: (data: ProjectFormValues) => void;
}

export function ProjectForm({ project, onSubmit }: ProjectFormProps) {
  const form = useForm<ProjectFormValues>({
    resolver: zodResolver(insertProjectSchema),
    defaultValues: project || {
      title: '',
      description: '',
      imageUrl: '',
      projectUrl: '',
      githubUrl: '',
      technologies: [],
      featured: false
    }
  });

  const [imagePreview, setImagePreview] = useState<string | null>(project?.imageUrl || null);

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setImagePreview(reader.result as string);
        form.setValue('imageUrl', reader.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  return (
    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
      <div>
        <label htmlFor="title" className="block text-sm font-medium text-gray-700">
          Project Title
        </label>
        <input
          {...form.register('title')}
          type="text"
          id="title"
          className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 focus:border-primary focus:outline-none focus:ring-primary sm:text-sm"
          placeholder="My Awesome Project"
        />
        {form.formState.errors.title && (
          <p className="mt-1 text-sm text-red-600">{form.formState.errors.title.message}</p>
        )}
      </div>

      <div>
        <label htmlFor="description" className="block text-sm font-medium text-gray-700">
          Description
        </label>
        <textarea
          {...form.register('description')}
          id="description"
          rows={4}
          className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 focus:border-primary focus:outline-none focus:ring-primary sm:text-sm"
          placeholder="Project description..."
        />
        {form.formState.errors.description && (
          <p className="mt-1 text-sm text-red-600">{form.formState.errors.description.message}</p>
        )}
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700">Project Image</label>
        <div className="mt-2 flex items-center gap-4">
          <input
            type="file"
            accept="image/*"
            onChange={handleImageChange}
            className="hidden"
            id="image-upload"
          />
          <label
            htmlFor="image-upload"
            className="cursor-pointer bg-white px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
          >
            Choose Image
          </label>
          {imagePreview && (
            <div className="relative w-32 h-32">
              <img
                src={imagePreview}
                alt="Preview"
                className="w-full h-full object-cover rounded-lg"
              />
              <button
                type="button"
                onClick={() => {
                  setImagePreview(null);
                  form.setValue('imageUrl', '');
                }}
                className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600"
              >
                ×
              </button>
            </div>
          )}
        </div>
        {form.formState.errors.imageUrl && (
          <p className="mt-1 text-sm text-red-600">{form.formState.errors.imageUrl.message}</p>
        )}
      </div>

      <div>
        <label htmlFor="projectUrl" className="block text-sm font-medium text-gray-700">
          Project URL
        </label>
        <input
          {...form.register('projectUrl')}
          type="url"
          id="projectUrl"
          className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 focus:border-primary focus:outline-none focus:ring-primary sm:text-sm"
          placeholder="https://myproject.com"
        />
        {form.formState.errors.projectUrl && (
          <p className="mt-1 text-sm text-red-600">{form.formState.errors.projectUrl.message}</p>
        )}
      </div>

      <div>
        <label htmlFor="githubUrl" className="block text-sm font-medium text-gray-700">
          GitHub URL
        </label>
        <input
          {...form.register('githubUrl')}
          type="url"
          id="githubUrl"
          className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 focus:border-primary focus:outline-none focus:ring-primary sm:text-sm"
          placeholder="https://github.com/username/project"
        />
        {form.formState.errors.githubUrl && (
          <p className="mt-1 text-sm text-red-600">{form.formState.errors.githubUrl.message}</p>
        )}
      </div>

      <div>
        <label htmlFor="technologies" className="block text-sm font-medium text-gray-700">
          Technologies (comma-separated)
        </label>
        <input
          {...form.register('technologies')}
          type="text"
          id="technologies"
          className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 focus:border-primary focus:outline-none focus:ring-primary sm:text-sm"
          placeholder="React, TypeScript, Node.js"
          onChange={(e) => {
            const value = e.target.value;
            form.setValue('technologies', value.split(',').map(tech => tech.trim()).filter(Boolean));
          }}
          value={Array.isArray(form.getValues('technologies')) ? form.getValues('technologies').join(', ') : ''}
        />
        {form.formState.errors.technologies && (
          <p className="mt-1 text-sm text-red-600">{form.formState.errors.technologies.message}</p>
        )}
      </div>

      <div className="flex items-center">
        <input
          {...form.register('featured')}
          type="checkbox"
          id="featured"
          className="h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary"
        />
        <label htmlFor="featured" className="ml-2 block text-sm text-gray-700">
          Featured Project
        </label>
      </div>

      <div className="flex justify-end">
        <Button type="submit" disabled={form.formState.isSubmitting}>
          {form.formState.isSubmitting ? 'Saving...' : 'Save Project'}
        </Button>
      </div>
    </form>
  );
}